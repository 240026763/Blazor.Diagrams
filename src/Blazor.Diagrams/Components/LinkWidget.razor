@{
    var color = Link.Selected ? Link.SelectedColor ?? BlazorDiagram.Options.Links.DefaultSelectedColor : Link.Color ?? BlazorDiagram.Options.Links.DefaultColor;
    var result = Link.GeneratedPathResult;
}

@for (var i = 0; i < result.Paths.Length; i++)
{
    var index = i;
    var d = result.Paths[i].ToString();
    <path d="@d"
      stroke-width="@Link.Width.ToInvariantString()"
      fill="none"
      stroke="@color" />

    <path class="selection-helper"
      stroke="@color"
      stroke-width="12"
      d="@d"
      stroke-linecap="butt"
      stroke-opacity="0"
      fill="none"
      @onpointerdown="e => OnPointerDown(e, index)"
      @onpointerdown:stopPropagation="@Link.Segmentable" />
}

@if (Link.SourceMarker != null && result.SourceMarkerAngle != null && result.SourceMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.SourceMarkerPosition.X}, {result.SourceMarkerPosition.Y}) rotate({result.SourceMarkerAngle})"))">
        <path d="@Link.SourceMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.TargetMarker != null && result.TargetMarkerAngle != null && result.TargetMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.TargetMarkerPosition.X}, {result.TargetMarkerPosition.Y}) rotate({result.TargetMarkerAngle})"))">
        <path d="@Link.TargetMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.Vertices.Count > 0)
{
    var selectedColor = Link.SelectedColor ?? BlazorDiagram.Options.Links.DefaultSelectedColor;
    var normalColor = Link.Color ?? BlazorDiagram.Options.Links.DefaultColor;
    <g>
        @foreach (var vertex in Link.Vertices)
        {
            <LinkVertexWidget @key="vertex.Id"
                      Vertex="vertex"
                      Color="@normalColor"
                      SelectedColor="@selectedColor" />
        }
    </g>
}

@foreach (var label in Link.Labels)
{
    <LinkLabelRenderer @key="label.Id" Label="@label" Paths="@result.Paths" />
}