@using SvgPathProperties;

@{
    var color = Link.Selected ? (Link.SelectedColor ?? Diagram.Options.Links.DefaultSelectedColor) : (Link.Color ?? Diagram.Options.Links.DefaultColor);
    var result = Link.GeneratedPathResult;
    var bounds = Link.GetBounds()?.Inflate(10, 10);
}

@for (var i = 0; i < result.Paths.Length; i++)
{
    var index = i;
    var d = result.Paths[i].ToString();
    <path d="@d"
          stroke-width="@Link.Width.ToInvariantString()"
          fill="none"
          stroke="@color"/>

    @if (Link.IsAttached)
    {
        <path class="selection-helper"
              stroke="@color"
              stroke-width="12"
              d="@d"
              stroke-linecap="butt"
              stroke-opacity="0"
              fill="none"
              @onmousedown="e => OnMouseDown(e, index)"
              @onmousedown:stopPropagation="@Link.Segmentable"
              @ontouchstart="e => OnTouchStart(e, index)"
              @ontouchstart:stopPropagation="@Link.Segmentable"/>
    }
}

@if (Link.SourceMarker != null && result.SourceMarkerAngle != null && result.SourceMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.SourceMarkerPosition.X}, {result.SourceMarkerPosition.Y}) rotate({result.SourceMarkerAngle})"))">
        <path d="@Link.SourceMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.TargetMarker != null && result.TargetMarkerAngle != null && result.TargetMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.TargetMarkerPosition.X}, {result.TargetMarkerPosition.Y}) rotate({result.TargetMarkerAngle})"))">
        <path d="@Link.TargetMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.Vertices.Count > 0)
{
    var selectedColor = Link.SelectedColor ?? Diagram.Options.Links.DefaultSelectedColor;
    var normalColor = Link.Color ?? Diagram.Options.Links.DefaultColor;
    <g>
        @foreach (var vertex in Link.Vertices)
        {
            <LinkVertexWidget @key="vertex.Id"
                              Vertex="vertex"
                              Color="@normalColor"
                              SelectedColor="@selectedColor"/>
        }
    </g>
}

@foreach (var label in Link.Labels)
{
    <LinkLabelRenderer @key="label.Id" Label="@label" Paths="@result.Paths"/>
}

@if (bounds != null)
{
    <rect fill="none"
          stroke="gray"
          stroke-width="1"
          stroke-dasharray="5"
          pointer-events="none"
          class="boundary"
          x="@bounds.Left.ToInvariantString()"
          y="@bounds.Top.ToInvariantString()"
          width="@bounds.Width.ToInvariantString()"
          height="@bounds.Height.ToInvariantString()">
    </rect>
}