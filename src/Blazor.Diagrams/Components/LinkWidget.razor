@{
    var router = Link.Router ?? DiagramManager.Options.Links.DefaultRouter;
    var pathGenerator = Link.PathGenerator ?? DiagramManager.Options.Links.DefaultPathGenerator;
    var sourcePosition = GetPositionBasedOnAlignment(Link.SourcePort, Link.SourceMarker);
    var targetPosition = Link.IsAttached ? GetPositionBasedOnAlignment(Link.TargetPort, Link.TargetMarker) : Link.OnGoingPosition;
    var route = router(DiagramManager, Link, sourcePosition, targetPosition);
    var result = pathGenerator(DiagramManager, Link, route);
    var color = Link.Selected ? (Link.SelectedColor ?? DiagramManager.Options.Links.DefaultSelectedColor)
        : (Link.Color ?? DiagramManager.Options.Links.DefaultColor);
}

@for (var i = 0; i < result.Paths.Length; i++)
{
    var index = i;
    <path d="@result.Paths[i]"
          stroke-width="@Link.Width.ToInvariantString()"
          fill="none"
          stroke="@color" />

    @if (Link.IsAttached)
    {
        <path class="selection-helper"
              stroke="@color"
              stroke-width="12"
              d="@result.Paths[i]"
              stroke-linecap="round"
              stroke-opacity="0"
              fill="none"
              @onmousedown="e => OnMouseDown(e, index)"
              @onmousedown:stopPropagation="@Link.Segmentable" />
    }
}

@if (Link.SourceMarker != null && result.SourceMarkerAngle != null && result.SourceMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.SourceMarkerPosition.X}, {result.SourceMarkerPosition.Y}) rotate({result.SourceMarkerAngle})"))">
        <path d="@Link.SourceMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.TargetMarker != null && result.TargetMarkerAngle != null && result.TargetMarkerPosition != null)
{
    <g transform="@(FormattableString.Invariant($"translate({result.TargetMarkerPosition.X}, {result.TargetMarkerPosition.Y}) rotate({result.TargetMarkerAngle})"))">
        <path d="@Link.TargetMarker.Path" fill="@color"></path>
    </g>
}

@if (Link.Vertices.Count > 0)
{
    var selectedColor = Link.SelectedColor ?? DiagramManager.Options.Links.DefaultSelectedColor;
    var normalColor = Link.Color ?? DiagramManager.Options.Links.DefaultColor;
    <g>
        @foreach (var vertex in Link.Vertices)
        {
            <LinkVertexWidget @key="vertex.Id"
                              Vertex="vertex"
                              Color="@normalColor"
                              SelectedColor="@selectedColor" />
        }
    </g>
} 