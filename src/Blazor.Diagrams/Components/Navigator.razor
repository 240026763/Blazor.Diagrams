@inherits NavigatorComponent

@if (DiagramManager.Container != null)
{
    var addedNodeX = Math.Max(0, DiagramManager.Pan.X);
    var addedNodeY = Math.Max(0, DiagramManager.Pan.Y);
    var addedCurrentViewX = Math.Abs(Math.Min(0, DiagramManager.Pan.X)) * XFactor;
    var addedCurrentViewY = Math.Abs(Math.Min(0, DiagramManager.Pan.Y)) * YFactor;
    var currentViewWidth = DiagramManager.Container.Width * XFactor;
    var currentViewHeight = DiagramManager.Container.Height * YFactor;

    <div class="diagram-navigator@(DefaultStyle ? " default" : "")">
        <div style="position: relative;">
            <div class="current-view"
                 style="top: @(addedCurrentViewY.ToInvariantString())px;
                        left: @(addedCurrentViewX.ToInvariantString())px;
                        width: @(currentViewWidth.ToInvariantString())px;
                        height: @(currentViewHeight.ToInvariantString())px;"></div>
        </div>
        <svg width="@(Width.ToInvariantString())px" height="@(Height.ToInvariantString())px">
            @foreach (var node in DiagramManager.Nodes.Where(n => n.Size != null))
            {
                var left = (Math.Max(0, node.Position.X * DiagramManager.Zoom) + addedNodeX) * XFactor;
                var top = (Math.Max(0, node.Position.Y * DiagramManager.Zoom) + addedNodeY) * YFactor;
                var width = node.Size.Width * DiagramManager.Zoom * XFactor;
                var height = node.Size.Height * DiagramManager.Zoom * YFactor;

                <g @key="node.Id" transform="translate(@left.ToInvariantString(), @top.ToInvariantString())">
                    <rect fill="#40babd"
                          width="@width.ToInvariantString()"
                          height="@height.ToInvariantString()"></rect>
                </g>
            }

            @foreach (var group in DiagramManager.Groups.Where(g => !Size.Zero.Equals(g.Size)))
            {
                var left = (Math.Max(0, group.Position.X * DiagramManager.Zoom) + addedNodeX) * XFactor;
                var top = (Math.Max(0, group.Position.Y * DiagramManager.Zoom) + addedNodeY) * YFactor;
                var width = group.Size.Width * DiagramManager.Zoom * XFactor;
                var height = group.Size.Height * DiagramManager.Zoom * YFactor;

                <g @key="group.Id" transform="translate(@left.ToInvariantString(), @top.ToInvariantString())">
                    <rect stroke="#40babd"
                          stroke-width="2"
                          fill="none"
                          width="@width.ToInvariantString()"
                          height="@height.ToInvariantString()"></rect>
                </g>
            }
        </svg>
    </div>
}
